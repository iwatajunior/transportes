import React, { useState, useEffect, useCallback } from 'react';
import api from '../services/api';
import {
    Container, Paper, Typography, Table, TableBody, TableCell,
    TableContainer, TableHead, TableRow, CircularProgress, Alert, Box, Button, IconButton,
    Avatar, Stack, Chip, Tooltip, useTheme, TextField, FormControl, InputLabel, Select, MenuItem,
    InputAdornment
} from '@mui/material';
import SearchIcon from '@mui/icons-material/Search';
import { Link as RouterLink } from 'react-router-dom';
import AddCircleOutlineIcon from '@mui/icons-material/AddCircleOutline';
import VisibilityIcon from '@mui/icons-material/Visibility';
import DirectionsCarIcon from '@mui/icons-material/DirectionsCar';
import PersonIcon from '@mui/icons-material/Person';
import PlaceIcon from '@mui/icons-material/Place';
import EventIcon from '@mui/icons-material/Event';
import FlagIcon from '@mui/icons-material/Flag';

const TripListPage = () => {
    const theme = useTheme();
    const [trips, setTrips] = useState([]);
    const [filteredTrips, setFilteredTrips] = useState([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState('');
    
    // Estados dos filtros
    const [filters, setFilters] = useState({
        destino: '',
        solicitante: '',
        dataSaida: '',
        dataRetorno: '',
        status: '',
        veiculo: '',
        motorista: '',
        textoGeral: ''
    });

    // Função para atualizar os filtros
    const handleFilterChange = (field, value) => {
        setFilters(prev => ({ ...prev, [field]: value }));
    };

    // Função para aplicar os filtros
    const applyFilters = useCallback(() => {
        const filtered = trips.filter(trip => {
            const matchDestino = !filters.destino || trip.destino_completo?.toLowerCase().includes(filters.destino.toLowerCase());
            const matchSolicitante = !filters.solicitante || trip.solicitante_nome?.toLowerCase().includes(filters.solicitante.toLowerCase());
            const matchDataSaida = !filters.dataSaida || trip.data_saida?.includes(filters.dataSaida);
            const matchDataRetorno = !filters.dataRetorno || trip.data_retorno_prevista?.includes(filters.dataRetorno);
            const matchStatus = !filters.status || trip.status_viagem?.toLowerCase() === filters.status.toLowerCase();
            const matchVeiculo = !filters.veiculo || 
                (trip.veiculo_alocado_modelo?.toLowerCase().includes(filters.veiculo.toLowerCase()) ||
                trip.veiculo_alocado_placa?.toLowerCase().includes(filters.veiculo.toLowerCase()));
            const matchMotorista = !filters.motorista || trip.motorista_nome?.toLowerCase().includes(filters.motorista.toLowerCase());
            const matchTextoGeral = !filters.textoGeral || 
                trip.finalidade?.toLowerCase().includes(filters.textoGeral.toLowerCase()) ||
                trip.observacoes?.toLowerCase().includes(filters.textoGeral.toLowerCase());

            return matchDestino && matchSolicitante && matchDataSaida && matchDataRetorno && 
                   matchStatus && matchVeiculo && matchMotorista && matchTextoGeral;
        });

        setFilteredTrips(filtered);
    }, [trips, filters]);

    useEffect(() => {
        applyFilters();
    }, [filters, trips, applyFilters]);

    const fetchTrips = useCallback(async () => {
        setIsLoading(true);
        setError('');
        try {
            const response = await api.get('/trips');
            setTrips(response.data || []);
        } catch (err) {
            console.error("Erro ao buscar viagens:", err);
            setError(err.response?.data?.message || 'Falha ao buscar viagens. Tente novamente mais tarde.');
        } finally {
            setIsLoading(false);
        }
    }, []);

    useEffect(() => {
        fetchTrips();
    }, [fetchTrips]);

    const formatDate = (dateString) => {
        if (!dateString) return 'N/A';
        const date = new Date(dateString);
        return new Date(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate())
          .toLocaleDateString('pt-BR', { timeZone: 'UTC' });
    };

    if (isLoading) {
        return (
            <Container maxWidth="lg" sx={{ mt: 4, mb: 4 }}>
                <Box display="flex" justifyContent="center" alignItems="center" minHeight="70vh">
                    <CircularProgress />
                </Box>
            </Container>
        );
    }

    if (error) {
        return (
            <Container maxWidth="lg" sx={{ mt: 4, mb: 4 }}>
                <Alert severity="error" sx={{ mb: 2 }}>{error}</Alert>
                <Button variant="contained" onClick={fetchTrips}>
                    Tentar Novamente
                </Button>
            </Container>
        );
    }

    const getStatusColor = (status) => {
        switch(status?.toLowerCase()) {
            case 'pendente': return { bg: '#FFF3E0', color: '#E65100', borderColor: '#FFB74D' };
            case 'aprovada': return { bg: '#E8F5E9', color: '#2E7D32', borderColor: '#81C784' };
            case 'em andamento': return { bg: '#E3F2FD', color: '#1565C0', borderColor: '#64B5F6' };
            case 'concluída': return { bg: '#E8EAF6', color: '#283593', borderColor: '#7986CB' };
            case 'cancelada': return { bg: '#FFEBEE', color: '#C62828', borderColor: '#E57373' };
            default: return { bg: '#F5F5F5', color: '#616161', borderColor: '#9E9E9E' };
        }
    };

    return (
        <Container maxWidth="xl">
            <Paper elevation={3} sx={{ p: { xs: 2, md: 3 }, backgroundColor: '#FFFFFF', borderRadius: 2 }}>
                <Box display="flex" justifyContent="space-between" alignItems="center" mb={3}>
                    <Typography variant="h4" component="h1" sx={{ fontFamily: "'Exo 2', sans-serif" }}>
                        Painel de Viagens
                    </Typography>
                    <Button
                        variant="contained"
                        color="primary"
                        component={RouterLink}
                        to="/registrar-viagem"
                        startIcon={<AddCircleOutlineIcon />}
                        sx={{ fontFamily: "'Exo 2', sans-serif" }}
                    >
                        Registrar Nova Viagem
                    </Button>
                </Box>

                {/* Barra de Filtros */}
                <Box sx={{ 
                    display: 'flex', 
                    flexWrap: 'wrap', 
                    gap: 1, 
                    mb: 2,
                    alignItems: 'center',
                    backgroundColor: theme.palette.grey[50],
                    p: 1,
                    borderRadius: 1
                }}>
                    <TextField
                        size="small"
                        label="Buscar"
                        value={filters.textoGeral}
                        onChange={(e) => handleFilterChange('textoGeral', e.target.value)}
                        sx={{ minWidth: 200 }}
                        InputProps={{
                            startAdornment: (
                                <InputAdornment position="start">
                                    <SearchIcon sx={{ fontSize: 20 }} />
                                </InputAdornment>
                            ),
                        }}
                    />
                    <TextField
                        size="small"
                        label="Data Saída"
                        type="date"
                        value={filters.dataSaida}
                        onChange={(e) => handleFilterChange('dataSaida', e.target.value)}
                        InputLabelProps={{ shrink: true }}
                        sx={{ width: 150 }}
                    />
                    <TextField
                        size="small"
                        label="Data Retorno"
                        type="date"
                        value={filters.dataRetorno}
                        onChange={(e) => handleFilterChange('dataRetorno', e.target.value)}
                        InputLabelProps={{ shrink: true }}
                        sx={{ width: 150 }}
                    />
                    <FormControl size="small" sx={{ minWidth: 120 }}>
                        <InputLabel>Status</InputLabel>
                        <Select
                            value={filters.status}
                            label="Status"
                            onChange={(e) => handleFilterChange('status', e.target.value)}
                        >
                            <MenuItem value="">Todos</MenuItem>
                            <MenuItem value="Pendente">Pendente</MenuItem>
                            <MenuItem value="Aprovada">Aprovada</MenuItem>
                            <MenuItem value="Em Andamento">Em Andamento</MenuItem>
                            <MenuItem value="Concluída">Concluída</MenuItem>
                            <MenuItem value="Cancelada">Cancelada</MenuItem>
                        </Select>
                    </FormControl>
                    <TextField
                        size="small"
                        label="Solicitante"
                        value={filters.solicitante}
                        onChange={(e) => handleFilterChange('solicitante', e.target.value)}
                        sx={{ width: 150 }}
                    />
                    <TextField
                        size="small"
                        label="Veículo"
                        value={filters.veiculo}
                        onChange={(e) => handleFilterChange('veiculo', e.target.value)}
                        sx={{ width: 150 }}
                    />
                </Box>

                {/* Lista de Viagens */}
                <TableContainer>
                    <Table>
                        <TableHead>
                            <TableRow>
                                <TableCell>Status</TableCell>
                                <TableCell>Solicitante</TableCell>
                                <TableCell>Destino</TableCell>
                                <TableCell>Data Saída</TableCell>
                                <TableCell>Data Retorno</TableCell>
                                <TableCell>Veículo</TableCell>
                                <TableCell>Motorista</TableCell>
                                <TableCell align="right">Ações</TableCell>
                            </TableRow>
                        </TableHead>
                        <TableBody>
                            {filteredTrips.map((trip) => (
                                <TableRow key={trip._id}>
                                    <TableCell>
                                        <Chip
                                            label={trip.status_viagem}
                                            sx={{
                                                backgroundColor: getStatusColor(trip.status_viagem).bg,
                                                color: getStatusColor(trip.status_viagem).color,
                                                border: `1px solid ${getStatusColor(trip.status_viagem).borderColor}`,
                                                fontWeight: 500
                                            }}
                                        />
                                    </TableCell>
                                    <TableCell>
                                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                                            <Avatar
                                                src={trip.solicitante_avatar}
                                                sx={{ width: 32, height: 32 }}
                                            >
                                                {trip.solicitante_nome?.charAt(0)}
                                            </Avatar>
                                            <Typography variant="body2">
                                                {trip.solicitante_nome}
                                            </Typography>
                                        </Box>
                                    </TableCell>
                                    <TableCell>{trip.destino_completo}</TableCell>
                                    <TableCell>{formatDate(trip.data_saida)}</TableCell>
                                    <TableCell>{formatDate(trip.data_retorno_prevista)}</TableCell>
                                    <TableCell>
                                        {trip.veiculo_alocado_modelo} 
                                        {trip.veiculo_alocado_placa && 
                                            <Typography variant="caption" display="block" color="text.secondary">
                                                {trip.veiculo_alocado_placa}
                                            </Typography>
                                        }
                                    </TableCell>
                                    <TableCell>
                                        {trip.motorista_nome && (
                                            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                                                <Avatar
                                                    src={trip.motorista_avatar}
                                                    sx={{ width: 32, height: 32 }}
                                                >
                                                    {trip.motorista_nome.charAt(0)}
                                                </Avatar>
                                                <Typography variant="body2">
                                                    {trip.motorista_nome}
                                                </Typography>
                                            </Box>
                                        )}
                                    </TableCell>
                                    <TableCell align="right">
                                        <Tooltip title="Ver Detalhes">
                                            <IconButton
                                                component={RouterLink}
                                                to={`/viagem/${trip._id}`}
                                                size="small"
                                            >
                                                <VisibilityIcon />
                                            </IconButton>
                                        </Tooltip>
                                    </TableCell>
                                </TableRow>
                            ))}
                        </TableBody>
                    </Table>
                </TableContainer>
            </Paper>
        </Container>
    );
};

export default TripListPage;
